def compare(filename, uploaded_file_id, page_number, source_width, source_height):
	"""
		This function compares the currently generated thumbnail with all the other thumbnails from the 'thumbnail' table.
		It compares thumbnails that are generated by the same type of file (PDF or PNG), and with the same dimensions and orientation.
		It also generates the difference PNG and stores it locally and also on the 'thumb_comparison' table.
		Input: Thumnail. 
		Output: Percentage difference between the current thumbnail and the other "compatible" thumbnails in the 'thumbnail' table
	"""

	import mysql.connector
	import config
	from database import login_info
	import os
	import subprocess

	db = mysql.connector.Connect(**login_info)
	cursor=db.cursor()

	def compare_files(mainfile, otherfile):
		pipe = subprocess.Popen("node ImageComparison/compare.js %s %s" %(mainfile, otherfile), shell=True, stdout=subprocess.PIPE).stdout
		output = pipe.read()
		return output.replace("\n","")

	valid_comparison = "True"

	sql_query1 = """SELECT * FROM thumbnail WHERE dir LIKE '%s'""" %(filename)
	cursor.execute(sql_query1)

	file_id = 0
	file_orientation = ""
	file_generated_by = ""
	for row in cursor:
		file_id = row[0]
		file_orientation = row[4]
		file_generated_by = row[5]
		break
	cursor.close()

	db = mysql.connector.Connect(**login_info)
	cursor=db.cursor()
	sql_query2 = """SELECT * FROM thumbnail WHERE generatedBy LIKE '%s' AND width = '%s' AND height = '%s' AND dir NOT LIKE '%s' AND orientation LIKE '%s' """ % (file_generated_by, source_width, source_height, filename, file_orientation)
	cursor.execute(sql_query2)
	files_to_compare = list()
	files_to_compare_id = list()
	for row in cursor:
		files_to_compare.append(row[1].encode("utf8"))
		files_to_compare_id.append(row[0])
	cursor.close()
	print("[" + str(uploaded_file_id) + "," + page_number +"] Found %d Thumbnails for valid comparison" %(len(files_to_compare)))
	config.write_to_file(config.log_file_name,"[" + str(uploaded_file_id) + "," + page_number +"] Found %d Thumbnails for valid comparison" %(len(files_to_compare)))


	for file_number in range(len(files_to_compare)):
		percentage_difference = compare_files(filename, files_to_compare[file_number])

		if percentage_difference == "0":
			print("[" + str(uploaded_file_id) + "," + page_number +"] Thumbnail Matches With Thumbnail ID: " + str(files_to_compare_id[file_number]) + ". Aborting")
			config.write_to_file(config.log_file_name,"[" + str(uploaded_file_id) + "," + page_number +"] Thumbnail Matches With Thumbnail ID: " + str(files_to_compare_id[file_number]) + ". Aborting")
			db = mysql.connector.Connect(**login_info)
			cursor=db.cursor()
			sql_query4 = "DELETE FROM thumb_comparison WHERE new_image_id LIKE %s" %(file_id) 
			cursor.execute(sql_query4)
			db.commit()
			cursor.close()
			db = mysql.connector.Connect(**login_info)
			cursor=db.cursor()
			sql_query5 = "DELETE FROM thumbnail WHERE id = %d" %(file_id) 
			cursor.execute(sql_query5)
			db.commit()
			cursor.close()
			print("[" + str(uploaded_file_id) + "," + page_number +"] Deleted database entry for this Thumbnail ID: " + str(file_id))
			config.write_to_file(config.log_file_name,"[" + str(uploaded_file_id) + "," + page_number +"] Deleted database entry for this Thumbnail ID: " + str(file_id))
			valid_comparison = "False"
			return valid_comparison, str(files_to_compare_id[file_number])
		current_image_id = files_to_compare_id[file_number]
		db = mysql.connector.Connect(**login_info)
		cursor=db.cursor()
		
		output_file_name = filename.replace(config.store_thumbnails,"")+"_"+files_to_compare[file_number].replace(config.store_thumbnails,"")+"diff.png"
		os.rename(output_file_name, config.store_comparison_images+output_file_name)

		comparison_blob = "NULL"

		if config.add_comparison_blob_into_db == 1:
			with open(config.store_comparison_images+output_file_name,"rb") as img:
				comparison_blob = img.read()

		# sql_query3 = """INSERT INTO thumb_comparison VALUES(%d, %d, '%s', '%s')""" %(file_id, current_image_id, comparison_blob, str(percentage_difference))
		cursor.execute("INSERT INTO thumb_comparison VALUES(%s, %s, %s, %s)", (file_id, current_image_id, comparison_blob, str(percentage_difference),))
		db.commit()
		cursor.close()
	return valid_comparison, "NONE"
		# First file that is added
if __name__ == '__main__':
	compare("thumbnails/72678-AtestImg_small.pdf0.pdf.png")
